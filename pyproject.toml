[tool.poetry]
name = "taskiq-aio-kafka"
description = "Kafka broker for taskiq"
authors = ["Taskiq team <taskiq@no-reply.com>"]
maintainers = ["Taskiq team <taskiq@no-reply.com>"]
version = "0.2.1"
readme = "README.md"
license = "LICENSE"
classifiers = [
    "Typing :: Typed",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: System :: Networking",
    "Development Status :: 3 - Alpha",
]
keywords = ["taskiq", "tasks", "distributed", "async", "kafka", "aiokafka"]
packages = [{ include = "taskiq_aio_kafka" }]

[tool.poetry.dependencies]
python = "^3.9"
taskiq = "^0"
aiokafka = "^0.10.0"
kafka-python = "^2.0.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
flake8 = "^7"
isort = "^5.13.2"
mypy = "^1.10.0"
pre-commit = "^3.7.1"
yesqa = "^1.5.0"
autoflake = "^2.3.1"
wemake-python-styleguide = "^0.19.2"
coverage = "^7.5.3"
pytest-cov = "^5.0.0"
mock = "^5.1.0"
anyio = "^4.4.0"
pytest-xdist = { version = "^3.6.1", extras = ["psutil"] }
types-mock = "^5.1.0"
black = "^24.4.2"

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_return_any = false
warn_unused_ignores = false

[tool.isort]
profile = "black"
multi_line_output = 3

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
